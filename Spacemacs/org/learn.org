* tips
| functions                       | key               | link                           | remark |
|---------------------------------+-------------------+--------------------------------+--------|
| org-ctrl-c-ctrl-c               | ,,                |                                |        |
| org-cycle                       | TAB               | [[*Visibility Cycling][Visibility Cycling]]             |        |
| org-global-cycle                | S-TAB             | [[*Visibility Cycling][Visibility Cycling]]             |        |
| org-insert-drawer               | ,id               | [[*Drawers][Drawers]]                        |        |
| org-insert-structure-template   | ,ib               | [[*Blocks][Blocks]]                         |        |
| org-store-link                  | SPC-a-o-l         | [[*External Links][External Links]]                 |        |
| org-insert-link                 | ,il               | [[*Internal Links][Internal Links]]                 |        |
| org-todo                        | ,TT               | [[*\TODO Basics][TODO Basics]]                    |        |
| org-show-todo-tree              | ,Tt               | [[*\TODO Basics][TODO Basics]]                    |        |
| org-todo-list                   | SPC-a-o-t         | [[*\TODO Basics][TODO Basics]]                    |        |
| org-priority                    | ,p                | [[*Priorities][Priorities]]                     |        |
| org-tags-view                   | SPC-a-o-m         | [[*Tag Searches][Tag Searches]] [[*Property Searches][Property Searches]] |        |
| org-set-property                | ,ip               | [[*Property Syntax][Property Syntax]]                |        |
| org-timestamp-down-day          | S-LEFT            | [[*Createing Timestamps][Createing Timestamps]]           |        |
| org-timestamp-up-day            | S-RIGHT           | [[*Createing Timestamps][Createing Timestamps]]           |        |
| org-timestamp-up                | S-UP              | [[*Createing Timestamps][Createing Timestamps]]           |        |
| org-timestamp-down              | S-DOWN            | [[*Createing Timestamps][Createing Timestamps]]           |        |
| org-open-at-point               | ,xo               | [[*Createing Timestamps][Createing Timestamps]]           |        |
| org-time-stamp                  | ,dt               | [[*Createing Timestamps][Createing Timestamps]]           |        |
| org-time-stamp-inactive         | ,dT               | [[*Createing Timestamps][Createing Timestamps]]           |        |
| org-clock-in                    | SPC-a-o-C-i       | [[*Clocking Work Time][Clocking Work Time]]             |        |
| org-clock-cancel                | SPC-a-o-C-c       | [[*Clocking Work Time][Clocking Work Time]]             |        |
| org-clock-goto                  | SPC-a-o-C-g       | [[*Clocking Work Time][Clocking Work Time]]             |        |
| org-clock-jump-to-current-clock | SPC-a-o-C-j       | [[*Clocking Work Time][Clocking Work Time]]             |        |
| org-clock-out                   | SPC-a-o-C-o       | [[*Clocking Work Time][Clocking Work Time]]             |        |
| org-clock-in-last               | SPC-a-o-C-I       | [[*Clocking Work Time][Clocking Work Time]]             |        |
| org-resolve-clocks              | SPC-a-o-C-r       | [[*Clocking Work Time][Clocking Work Time]]             |        |
| org-refile                      | ,sr               | [[*Refiling and Archiving][Refiling and Archiving]]         |        |
| org-archive-subtree-default     | ,sA               | [[*Refiling and Archiving][Refiling and Archiving]]         |        |
| org-toggle-archive-tag          | ,sa               | [[*Refiling and Archiving][Refiling and Archiving]]         |        |
| org-capture                     | SPC-a-o-c,SPC-C-c | [[*Capture][Capture]]                        |        |
| org-capture-finalize            | C-c C-c           | [[*Capture][Capture]]                        |        |
| org-capture-refile              | C-c C-w           | [[*Capture][Capture]]                        |        |
| org-capture-kill                | C-c C-k           | [[*Capture][Capture]]                        |        |
| org-attach                      | ,A                | [[*Attachments][Attachments]]                    |        |
| org-agenda                      | SPC-a-o-o         | [[*The Agenda Dispatcher][The Agenda Dispatcher]]          |        |
 
* Document Structure
  
** Headlines

Use tab S-tab to cycling.

#+begin_src org
* Top level headline
** Second level
*** Third level
#+end_src

** Visibility Cycling

TAB(org-cycle)
S-TAB(org-global-cycle)


** Plain Lists

#+begin_src org
My favorite scenes are (in this order)
1. The attack of the Rohirrim
2. Eowyn's fight with the witch king
   + this was already my favorite scene in the book
   + I really like Miranda Otto.
3. Peter Jackson being shot by Legolas
   - on DVD only
   He makes a really funny face when it happens.
But in the end, no individual scenes matter but the film as a whole.
Important actors in this film are:
- Elijah Wood :: He plays Frodo
- Sean Astin :: He plays Sam, Frodo's friend.  I still remember him
     very well from his role as Mikey Walsh in /The Goonies/.
#+end_src

** Drawers
:DRAWERNAME:
Sometimes you want to keep information associated with an entry, but you normally do not want to see it.
:END:


Sometimes you want to keep information associated with an entry, but you normally do not want to see it.

,id(org-insert-drawer) 

** Blocks
   
Org mode uses ‘#+BEGIN’ … ‘#+END’ blocks for various purposes from including source code examples.

,ib(org-insert-structure-template) Block

* Tables

,tn(org-table-create)

TAB (org-table-next-field)

S-TAB (org-table-previous-field)

RET (org-table-next-row)

,ta(org-table-align)

** The Orgtbl Minor Mode
   
If you like the intuitive way the Org table editor works,
you might also want to use it in other modes like Text mode or Mail mode.
The minor mode Orgtbl mode makes this possible.
You can always toggle the mode with M-x orgtbl-mode.
To turn it on by default, 


** Org Plot

if use it, need gnuplot.


#+PLOT: title:"Citas" ind:1 deps:(3) type:2d with:histograms set:"yrange [0:]"
| Sede      | Max cites | H-index |
|-----------+-----------+---------|
| Chile     |    257.72 |   21.39 |
| Leeds     |    165.77 |   19.68 |
| Sao Paolo |     71.00 |   11.50 |
| Stockholm |    134.19 |   14.33 |
| Morelia   |    257.56 |   17.67 |

* Hyperlinks

** Link Format

#+begin_src shell
[[LINK][DESCRIPTION]]
[[LINK]]
#+end_src

** Internal Links

#+NAME: My Target
| a  | table      |
|----+------------|
| of | four cells |

[[My Target]]

,il(org-insert-link)

** External Links

SPC-a-o-l(org-store-link)   

** Search Options in File Links

#+begin_src shell
[[file:~/code/main.c::255]]
[[file:~/xx.org::My Target]]
[[file:~/xx.org::*My Target]]
[[file:~/xx.org::#my-custom-id]]
[[file:~/xx.org::/regexp/]]
[[attachment:main.c::255]]
#+end_src

- ‘255’
Jump to line 255.

- ‘My Target’
Search for a link target ‘<<My Target>>’,
or do a text search for ‘my target’,
similar to the search in internal links,
see Internal Links. In HTML export (see HTML Export),
such a file link becomes a HTML reference to the corresponding named anchor in the linked file.

- ‘*My Target’
In an Org file, restrict search to headlines.

‘#my-custom-id’
Link to a heading with a ‘CUSTOM_ID’ property

‘/REGEXP/’
Do a regular expression search for REGEXP.
This uses the Emacs command occur to list all matches in a separate window.
If the target file is in Org mode,
org-occur is used to create a sparse tree with the matches.

* \TODO Items

** \TODO Basics

,TT(org-todo)
,Tt(org-show-todo-tree)
SPC-a-o-t(org-todo-list)

#+begin_src shell
*** \TODO Write letter to Sam
#+end_src

** Extended Use of TODO Keywords


Org mode allows you to classify TODO items in more complex ways with TODO keywords (stored in org-todo-keywords).

For example:
#+begin_src elisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")
        (sequence "REPORT(r!)" "BUG(b@/!)" "KNOWNCAUSE(k!)" "|" "FIXED(f@)")))
#+end_src

*** Setting up keywords for individual files

For file-local settings, you need to add special lines to the file which set the keywords and interpretation for that file only.
For example:
#+begin_src org
#+TODO: TODO | DONE
#+TODO: REPORT BUG KNOWNCAUSE | FIXED
#+TODO: | CANCELED
#+end_src

*** Faces for TODO keywords

. If you are using more than two different states,
you might want to use special faces for some of them.
This can be done using the variable org-todo-keyword-faces.
For example:
#+begin_src org
(setq org-todo-keyword-faces
      '(("TODO" . org-warning) ("STARTED" . "yellow")
        ("CANCELED" . (:foreground "blue" :weight bold))))    
#+end_src

*** \TODO dependencies

Sometimes there is a logical sequence to (sub)tasks,
so that one subtask cannot be acted upon before all siblings above it have been marked as done.
If you customize the variable org-enforce-todo-dependencies,
Org blocks entries from changing state to DONE while they have TODO children that are not DONE.
Furthermore, if an entry has a property ‘ORDERED’,
each of its TODO children is blocked until all earlier siblings are marked as done.

For example:

#+begin_src shell
* \TODO Blocked until (two) is done
** \DONE one
** \TODO two
#+end_src

#+begin_src shell
* Parent
:PROPERTIES:
:ORDERED:  t
:END:
** \TODO a
** \TODO b, needs to wait for (a)
** \TODO c, needs to wait for (a) and (b)
#+end_src

#+begin_src org
* This entry is never blocked
:PROPERTIES:
:NOBLOCKING: t
:END:
#+end_src

** Priorities

By default, Org mode supports three priorities: ‘A’, ‘B’, and ‘C’.
‘A’ is the highest priority.
An entry without a cookie is treated as equivalent if it had priority ‘B’.
Priorities make a difference only for sorting in the agenda (see Weekly/daily agenda).
Outside the agenda, they have no inherent meaning to Org mode. 
   
,p(org-priority)

#+begin_src shell
*** \TODO [#A] Write letter to Sam
#+end_src

** Breaking Down Tasks into Subtasks

It is often advisable to break down large tasks into smaller,
manageable subtasks. You can do this by creating an outline tree below a TODO item,
with detailed subtasks on the tree
To keep an overview of the fraction of subtasks that have already been marked as done,
insert either ‘[/]’ or ‘[%]’ anywhere in the headline

#+begin_src shell
* Organize Party [0%]
** \DONE Call people [1/2]
   CLOSED: [2021-01-28 Thu 11:14]
   - State "DONE"       from "TODO"       [2021-01-28 Thu 11:14]
*** \TODO Peter
    - State "DONE"       from "TODO"       [2021-01-28 Thu 11:13]
*** \DONE Sarah
** \DONE Buy food
   CLOSED: [2021-01-28 Thu 11:14]
   - State "DONE"       from "TODO"       [2021-01-28 Thu 11:14]
** \DONE Talk to neighbor
#+end_src

If a heading has both checkboxes and TODO children below it,
the meaning of the statistics cookie become ambiguous.
Set the property ‘COOKIE_DATA’ to either ‘checkbox’ or ‘todo’ to resolve this issue.
If you would like to have the statistics cookie count any TODO entries in the subtree (not just direct children),
configure the variable org-hierarchical-todo-statistics.
To do this for a single subtree,
include the word ‘recursive’ into the value of the ‘COOKIE_DATA’ property.
#+begin_src shell
* Parent capturing statistics [2/20]
  :PROPERTIES:
  :COOKIE_DATA: todo recursive
  :END:
#+end_src

** Checkboxes


#+begin_src shell
* \TODO Organize party [3/4]
  - [-] call people [2/3]
    - [X] Peter
    - [X] Sarah
    - [ ] Sam
  - [X] order food
  - [X] think about what music to play
  - [X] talk to the neighbors
#+end_src

* Tags

** Tag Inheritance

Tags make use of the hierarchical structure of outline trees.
If a heading has a certain tag, all subheadings inherit the tag as well.
For example, in the list

#+begin_src shell
* Meeting with the French group      :work:
** Summary by Frank                  :boss:notes:
*** \TODO Prepare slides for him                                     :action:
#+end_src
the final heading has the tags ‘work’, ‘boss’, ‘notes’,
and ‘action’ even though the final heading is not explicitly marked with those tags. 

** Setting Tags
    
,it(org-set-tags-command)

To set these mutually exclusive groups in the variable org-tags-alist,
you must use the dummy tags :startgroup and :endgroup instead of the braces.
Similarly, you can use :newline to indicate a line break.
The previous example would be set globally by the following configuration:
#+begin_src emacs-lisp
(setq org-tag-alist '((:startgroup . nil)
                      ("@work" . ?w) ("@home" . ?h)
                      ("@tennisclub" . ?t)
                      (:endgroup . nil)
                      ("laptop" . ?l) ("pc" . ?p)))

#+end_src

** Tag Hierarchy

Tags can be defined in hierarchies.
A tag can be defined as a group tag for a set of other tags.
The group tag can be seen as the “broader term” for its set of tags.
Defining multiple group tags and nesting them creates a tag hierarchy.
#+begin_src emacs-lisp 
(setq org-tag-alist '((:startgrouptag)
                      ("GTD")
                      (:grouptags)
                      ("Control")
                      ("Persp")
                      (:endgrouptag)
                      (:startgrouptag)
                      ("Control")
                      (:grouptags)
                      ("Context")
                      ("Task")
                      (:endgrouptag)))
#+end_src

** Tag Searches

SPC-a-o-m(org-tags-view)

* Properties and Columns

** Property Syntax

,ip(org-set-property)

#+begin_src shell
* CD collection
** Classic
*** Goldberg Variations
    :PROPERTIES:
    :Title:     Goldberg Variations
    :Composer:  J.S. Bach
    :Artist:    Glenn Gould
    :Publisher: Deutsche Grammophon
    :NDisks:    1
    :END:
#+end_src

You may define the allowed values for a particular property ‘Xyz’ by setting a property ‘Xyz_ALL’.
This special property is inherited,
so if you set it in a level 1 entry,
it applies to the entire tree.
When allowed values are defined,
setting the corresponding property becomes easier and is less prone to typing errors.
For the example with the CD collection, we can pre-define publishers and the number of disks in a box like this:

#+begin_src shell
* CD collection
  :PROPERTIES:
  :NDisks_ALL:  1 2 3 4
  :Publisher_ALL: "Deutsche Grammophon" Philips EMI
  :END:
#+end_src

** Special Properties

‘ALLTAGS’	All tags, including inherited ones.
‘BLOCKED’	t if task is currently blocked by children or siblings.
‘CATEGORY’	The category of an entry.
‘CLOCKSUM’	The sum of CLOCK intervals in the subtree. org-clock-sum
must be run first to compute the values in the current buffer.
‘CLOCKSUM_T’	The sum of CLOCK intervals in the subtree for today.
org-clock-sum-today must be run first to compute the
values in the current buffer.
‘CLOSED’	When was this entry closed?
‘DEADLINE’	The deadline timestamp.
‘FILE’	The filename the entry is located in.
‘ITEM’	The headline of the entry.
‘PRIORITY’	The priority of the entry, a string with a single letter.
‘SCHEDULED’	The scheduling timestamp.
‘TAGS’	The tags defined directly in the headline.
‘TIMESTAMP’	The first keyword-less timestamp in the entry.
‘TIMESTAMP_IA’	The first inactive timestamp in the entry.
‘TODO’	The TODO keyword of the entry.

** Property Searches

SPC-a-o-m(org-tags-view)

** Property Inheritance

The outline structure of Org documents lends itself to an inheritance model of properties:
if the parent in a tree has a certain property,
the children can inherit this property.
Org mode does not turn this on by default,
because it can slow down property searches significantly and is often not needed.
However, if you find inheritance useful,
you can turn it on by setting the variable org-use-property-inheritance.
It may be set to t to make all properties inherited from the parent,
to a list of properties that should be inherited,
or to a regular expression that matches inherited properties.
If a property has the value nil,
this is interpreted as an explicit un-define of the property,
so that inheritance search stops at this value and returns nil.

** Column View

wait completed.

* Dates and Times

To assist project planning, TODO items can be labeled with a date and/or a time.

** Timestamps
   
Plain timestamp; Event; Appointment
A simple timestamp just assigns a date/time to an item. This is just like writing down an appointment or event in a paper agenda. In the agenda display, the headline of an entry associated with a plain timestamp is shown exactly on that date.

#+begin_src shell
* Meet Peter at the movies
  <2006-11-01 Wed 19:15>
* Discussion on climate change
  <2006-11-02 Thu 20:00-22:00>
Timestamp with repeater interval
A timestamp may contain a repeater interval, indicating that it applies not only on the given date, but again and again after a certain interval of N days (d), weeks (w), months (m), or years (y). The following shows up in the agenda every Wednesday:

* Pick up Sam at school
  <2007-05-16 Wed 12:30 +1w>
Diary-style expression entries
For more complex date specifications, Org mode supports using the special expression diary entries implemented in the Emacs Calendar package60. For example, with optional time:

* 22:00-23:00 The nerd meeting on every 2nd Thursday of the month
  <%%(diary-float t 4 2)>
Time/Date range
Two timestamps connected by ‘--’ denote a range. The headline is shown on the first and last day of the range, and on any dates that are displayed and fall in the range. Here is an example:

** Meeting in Amsterdam
   <2004-08-23 Mon>--<2004-08-26 Thu>
Inactive timestamp
Just like a plain timestamp, but with square brackets instead of angular ones. These timestamps are inactive in the sense that they do not trigger an entry to show up in the agenda.

* Gillian comes late for the fifth time
  [2006-11-01 Wed]
#+end_src

** Createing Timestamps
   
S-LEFT(org-timestamp-down-day)
S-RIGHT(org-timestamp-up-day)
S-UP(org-timestamp-up)
S-DOWN(org-timestamp-down)
,xo(org-open-at-point)
,dt(org-time-stamp)
,dT(org-time-stamp-inactive) 
Like org-time-stamp, but insert an inactive timestamp that does not cause an agenda entry.

*** The date/time prompt

For example, let’s assume that today is June 13, 2006.
Here is how various inputs are interpreted.

‘3-2-5’	⇒ 2003-02-05
‘2/5/3’	⇒ 2003-02-05
‘14’	⇒ 2006-06-14
‘12’	⇒ 2006-07-12
‘2/5’	⇒ 2007-02-05
‘Fri’	⇒ nearest Friday (default date or later)
‘sep 15’	⇒ 2006-09-15
‘feb 15’	⇒ 2007-02-15
‘sep 12 9’	⇒ 2009-09-12
‘12:45’	⇒ 2006-06-13 12:45
‘22 sept 0:34’	⇒ 2006-09-22 0:34
‘w4’	⇒ ISO week for of the current year 2006
‘2012 w4 fri’	⇒ Friday of ISO week 4 in 2012
‘2012-w04-5’	⇒ Same as above

Furthermore you can specify a relative date by giving,
as the first thing in the input: a plus/minus sign,
a number and a letter—‘d’,
‘w’, ‘m’ or ‘y’—to indicate change in days, weeks, months, or years.
With a single plus or minus, the date is always relative to today.
With a double plus or minus, it is relative to the default date.
If instead of a single letter, you use the abbreviation of day name,
the date is the Nth such day, e.g.:

‘+0’	⇒ today
‘.’	⇒ today
‘+4d’	⇒ four days from today
‘+4’	⇒ same as +4d
‘+2w’	⇒ two weeks from today
‘++5’	⇒ five days from default date
‘+2tue’	⇒ second Tuesday from now

** Deadlines and Scheduling

,dd(org-deadline)
,ds(org-schedule)

*** Repeated Tasks
    
#+begin_src shell
** \TODO Pay the rent
   DEADLINE: <2005-10-01 Sat +1m>
#+end_src

the ‘+1m’ is a repeater;
the intended interpretation is that the task has a deadline on ‘<2005-10-01>’
and repeats itself every (one) month starting from that time.
You can use yearly, monthly, weekly, daily and hourly repeat cookies
by using the ‘y’, ‘m’, ‘w’, ‘d’ and ‘h’ letters.
If you need both a repeater and a special warning period in a deadline entry,
the repeater should come first and the warning period last

DEADLINE: <2005-10-01 Sat +1m -3d>

** Clocking Work Time

SPC-a-o-C-i(org-clock-in) Start the clock on the current item.
SPC-a-o-C-c(org-clock-cancel) Cancel the current clock. 
SPC-a-o-C-g(org-clock-goto) Jump to the headline of the currently clocked in task. 
SPC-a-o-C-j(org-clock-jump-to-current-clock) 
SPC-a-o-C-o(org-clock-out) Stop the clock.
SPC-a-o-C-I(org-clock-in-last) Re-clock the last clocked task. 
SPC-a-o-C-r(org-resolve-clocks)

* Refiling and Archiving

,sr(org-refile)
,sA(org-archive-subtree-default)
,sa(org-toggle-archive-tag)

* Capture and Attachments

** Capture

SPC-C-c(org-capture)
C-c C-c(org-capture-finalize)
C-c C-w(org-capture-refile)
C-c C-k(org-capture-kill)

** Attachments

,A(org-attach)

* Agenda Views

Org can select items based on various criteria and display them in a separate buffer.
Six different view types are provided:

- an agenda that is like a calendar and shows information for specific dates,
- a TODO list that covers all unfinished action items,
- a match view, showings headlines based on the tags, properties, and TODO state associated with them,
- a text search view that shows all entries from multiple files that contain specified keywords,
- a stuck projects view showing projects that currently do not move along, and
- custom views that are special searches and combinations of different views.
  
** Agenda Files

The information to be shown is normally collected from all agenda files,
the files listed in the variable org-agenda-files.
If a directory is part of this list,
all files with the extension '.org' in this directory are part of the list.

** The Agenda Dispatcher

SPC-a-o-o(org-agenda)

